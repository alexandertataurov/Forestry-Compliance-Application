#!/bin/bash
# Ultimate One-Command Cursor Automation Launcher
# Usage: ./run [workflow] [options]

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Cursor Automation - One Command Starter${NC}"
echo "=============================================="

# Check if we're in the right directory
if [[ ! -f "start.py" ]]; then
    echo -e "${RED}‚ùå start.py not found. Please run from .mcp-server directory${NC}"
    exit 1
fi

# Check Python availability
if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
    echo -e "${RED}‚ùå Python not found. Please install Python 3.8+${NC}"
    exit 1
fi

# Prefer local venv Python if available, else python3/python
if [[ -x "venv/bin/python" ]]; then
  PYTHON_CMD="venv/bin/python"
else
  PYTHON_CMD="python3"
  if ! command -v python3 &> /dev/null; then
      PYTHON_CMD="python"
  fi
fi

# Check dependencies
echo -e "${BLUE}üì¶ Checking dependencies...${NC}"
$PYTHON_CMD -c "import sqlite3; print('‚úÖ SQLite available')" || {
    echo -e "${RED}‚ùå SQLite not available${NC}"
    exit 1
}

# Check for organized structure files
if [[ ! -f "src/core/mcp_server.py" ]] || [[ ! -f "src/automation/cursor_automation_enhanced.py" ]]; then
    echo -e "${RED}‚ùå Required files missing in organized structure${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ All dependencies check passed${NC}"

# Parse simple arguments
WORKFLOW="2-agent"
EXTRA_ARGS=""

for arg in "$@"; do
    case $arg in
        2-agent|3-agent|4-agent|6-agent|custom)
            WORKFLOW="$arg"
            ;;
        --help|-h|help)
            $PYTHON_CMD start.py --help
            exit 0
            ;;
        --dry-run)
            echo -e "${BLUE}üß™ Running dry-run test...${NC}"
            $PYTHON_CMD start.py "$WORKFLOW" --dry-run
            exit 0
            ;;
        *)
            EXTRA_ARGS="$EXTRA_ARGS $arg"
            ;;
    esac
done

# Show workflow info
echo -e "${BLUE}üìã Starting ${WORKFLOW} workflow${NC}"

# Check for GUI dependencies if needed
if [[ "$EXTRA_ARGS" != *"--no-gui"* ]]; then
    echo -e "${BLUE}üñ±Ô∏è  Checking GUI dependencies...${NC}"
    
    if command -v xdotool &> /dev/null && command -v xclip &> /dev/null; then
        echo -e "${GREEN}‚úÖ GUI automation tools available${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  GUI tools missing. Install with: sudo apt install xdotool xclip${NC}"
        echo -e "${YELLOW}   Or run with: ./run $WORKFLOW --no-gui${NC}"
        
        # Ask user if they want to continue without GUI
        read -p "Continue without GUI automation? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${RED}‚ùå Cancelled by user${NC}"
            exit 1
        fi
        EXTRA_ARGS="$EXTRA_ARGS --no-gui"
    fi
fi

### Start MCP server (optional) ###############################################
# By default, we let Cursor launch the MCP server via stdio.
# Use --start-mcp to start it here for local testing.

START_MCP=false
for arg in $EXTRA_ARGS; do
  if [[ "$arg" == "--start-mcp" ]]; then
    START_MCP=true
  fi
done

if $START_MCP; then
    mkdir -p logs
    if ! pgrep -f "src/core/mcp_server.py" > /dev/null; then
        echo -e "${BLUE}üì° Starting MCP server (local debug)...${NC}"
        # Unbuffered stdio and redirect output to logs
        $PYTHON_CMD -u src/core/mcp_server.py > logs/mcp_server.out 2> logs/mcp_server.err &
        MCP_PID=$!
        sleep 2  # Give server time to start

        # Check if server started successfully
        if ! kill -0 $MCP_PID 2>/dev/null; then
            echo -e "${RED}‚ùå Failed to start MCP server${NC}"
            if [[ -s logs/mcp_server.err ]]; then
                echo -e "${YELLOW}‚îÄ Last error logs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
                tail -n 40 logs/mcp_server.err || true
                echo -e "${YELLOW}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
            fi
            echo -e "${YELLOW}Tip:${NC} Cursor normally launches the MCP server.\n      Configure Cursor MCP with command: $PYTHON_CMD, args: -u src/core/mcp_server.py, cwd: $(pwd)"
            exit 1
        fi

        echo -e "${GREEN}‚úÖ MCP server running (PID: $MCP_PID)${NC}"

        # Setup cleanup on exit
        trap 'echo -e "\n${BLUE}üõë Cleaning up...${NC}"; kill $MCP_PID 2>/dev/null; exit 0' INT TERM
    else
        echo -e "${GREEN}‚úÖ MCP server already running${NC}"
    fi
else
    echo -e "${YELLOW}‚ÑπÔ∏è  Skipping MCP background start (use --start-mcp to enable)${NC}"
fi

# Final launch
echo -e "${BLUE}üîÑ Launching workflow...${NC}"
echo

# Execute the main command
$PYTHON_CMD start.py "$WORKFLOW" $EXTRA_ARGS

echo -e "\n${GREEN}‚úÖ Workflow completed${NC}"
